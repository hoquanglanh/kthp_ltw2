import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import api from "../../api/api";
import { getToken, isAdmin } from "../../utils/authUtils";
import "./OrderPage.css";

export default function OrderPage() {
  const location = useLocation();

  const preselectedProduct = location.state?.preselectedProduct;
  const preselectedTable = location.state?.preselectedTable;

  const [availableTables, setAvailableTables] = useState([]);
  const [products, setProducts] = useState([]);
  const [selectedTable, setSelectedTable] = useState("");
  const [selectedProducts, setSelectedProducts] = useState([]);
  const [message, setMessage] = useState("");
  const [messageType, setMessageType] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  // L·∫•y danh s√°ch b√†n tr·ªëng
  const fetchAvailableTables = async () => {
  try {
    const res = await api.get("/tables", {
      headers: { Authorization: `Bearer ${getToken()}` },
    });

    // Ch·ªâ hi·ªÉn th·ªã b√†n ch∆∞a thanh to√°n (tr√°nh b√†n PAID)
    const usableTables = res.data.filter(
      (t) => t.status === "AVAILABLE" || t.status === "OCCUPIED"
    );

    setAvailableTables(usableTables);

    // N·∫øu c√≥ b√†n ƒë∆∞·ª£c truy·ªÅn t·ª´ TableList
    if (preselectedTable) {
      setSelectedTable(preselectedTable.id);
    }
  } catch (err) {
    console.error("L·ªói t·∫£i b√†n:", err);
  }
};


  // L·∫•y danh s√°ch s·∫£n ph·∫©m
  const fetchProducts = async () => {
    try {
      const res = await api.get("/products");
      setProducts(res.data);

      // N·∫øu c√≥ m√≥n ƒë∆∞·ª£c ch·ªçn s·∫µn t·ª´ ProductList
      if (preselectedProduct) {
        setSelectedProducts([preselectedProduct.id]);
      }
    } catch (err) {
      console.error("L·ªói t·∫£i s·∫£n ph·∫©m:", err);
    }
  };

  useEffect(() => {
    fetchAvailableTables();
    fetchProducts();
  }, []);

  // Ch·ªçn / B·ªè ch·ªçn m√≥n
  const handleSelectProduct = (productId) => {
    if (selectedProducts.includes(productId)) {
      setSelectedProducts(selectedProducts.filter((id) => id !== productId));
    } else {
      setSelectedProducts([...selectedProducts, productId]);
    }
  };

  // T√≠nh t·ªïng ti·ªÅn
  const getTotalPrice = () => {
    return selectedProducts.reduce((total, productId) => {
      const product = products.find((p) => p.id === productId);
      return total + (product?.price || 0);
    }, 0);
  };

  // X·ª≠ l√Ω ƒë·∫∑t b√†n / th√™m m√≥n
  const handleOrder = async () => {
    if (!selectedTable) {
      setMessage("‚ö†Ô∏è Vui l√≤ng ch·ªçn b√†n!");
      setMessageType("warning");
      return;
    }
    if (selectedProducts.length === 0) {
      setMessage("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√≥n!");
      setMessageType("warning");
      return;
    }

    const selectedTableInfo = availableTables.find(
      (t) => t.id === selectedTable
    );

    setIsLoading(true);
    try {
      if (selectedTableInfo?.status === "OCCUPIED") {
        // N·∫øu b√†n ƒëang c√≥ kh√°ch ‚Üí th√™m m√≥n v√†o ƒë∆°n hi·ªán t·∫°i
        await api.post(
          "/orders/add-items",
          {
            tableId: selectedTable,
            productIds: selectedProducts,
          },
          {
            headers: { Authorization: `Bearer ${getToken()}` },
          }
        );
        setMessage("‚úÖ ƒê√£ th√™m m√≥n v√†o ƒë∆°n hi·ªán t·∫°i!");
        setMessageType("success");
        setSelectedProducts([]);
      } else {
        // N·∫øu b√†n c√≤n tr·ªëng ‚Üí t·∫°o ƒë∆°n m·ªõi
        await api.post(
          "/orders",
          {
            tableId: selectedTable,
            productIds: selectedProducts,
          },
          {
            headers: { Authorization: `Bearer ${getToken()}` },
          }
        );
        setMessage("‚úÖ ƒê·∫∑t b√†n th√†nh c√¥ng!");
        setMessageType("success");
        setSelectedTable("");
        setSelectedProducts([]);
        fetchAvailableTables();
      }
    } catch (err) {
      console.error("L·ªói ƒë·∫∑t b√†n:", err);
      setMessage("‚ùå L·ªói x·ª≠ l√Ω ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i!");
      setMessageType("error");
    } finally {
      setIsLoading(false);
    }
  };

  // NgƒÉn admin truy c·∫≠p trang ƒë·∫∑t b√†n
  if (isAdmin()) {
    return (
      <div className="error-container">
        <div className="error-icon">üö´</div>
        <p className="error-message">
          Trang n√†y ch·ªâ d√†nh cho kh√°ch h√†ng, kh√¥ng ph·∫£i ADMIN.
        </p>
      </div>
    );
  }

  return (
    <div className="order-page">
      <div className="page-header">
        <h2 className="page-title">
          <span className="title-icon">üçΩÔ∏è</span>
          ƒê·∫∑t b√†n v√† g·ªçi m√≥n
        </h2>
      </div>

      <div className="order-content">
        {/* ------------------ Ch·ªçn b√†n ------------------ */}
        <div className="section-card">
          <h3 className="section-title">
            <span className="section-icon">ü™ë</span> Ch·ªçn b√†n
          </h3>
          <select
            value={selectedTable}
            onChange={(e) => setSelectedTable(e.target.value)}
            className="table-select"
            disabled={isLoading}
          >
            <option value="">-- Ch·ªçn b√†n --</option>
            {availableTables.map((t) => (
              <option key={t.id} value={t.id}>
                {t.name} ({t.status === "AVAILABLE" ? "Tr·ªëng" : "ƒêang c√≥ kh√°ch"})
              </option>
            ))}
          </select>
          {availableTables.length === 0 && (
            <p className="no-tables">
              Kh√¥ng c√≥ b√†n tr·ªëng. Vui l√≤ng quay l·∫°i sau!
            </p>
          )}
        </div>

        {/* ------------------ Ch·ªçn m√≥n ------------------ */}
        <div className="section-card">
          <h3 className="section-title">
            <span className="section-icon">‚òï</span> Ch·ªçn m√≥n (
            {selectedProducts.length} m√≥n ƒë√£ ch·ªçn)
          </h3>
          <div className="products-grid">
            {products.map((p) => (
              <div
                key={p.id}
                onClick={() => handleSelectProduct(p.id)}
                className={`product-card ${
                  selectedProducts.includes(p.id) ? "selected" : ""
                }`}
              >
                <div className="product-check">
                  {selectedProducts.includes(p.id) && (
                    <span className="check-icon">‚úì</span>
                  )}
                </div>
                <div className="product-icon">‚òï</div>
                <h4 className="product-name">{p.name}</h4>
                <p className="product-price">
                  {p.price.toLocaleString()}‚Ç´
                </p>
              </div>
            ))}
          </div>
        </div>

        {/* ------------------ T√≥m t·∫Øt ƒë∆°n h√†ng ------------------ */}
        {selectedProducts.length > 0 && (
          <div className="summary-card">
            <h3 className="summary-title">
              <span className="summary-icon">üìã</span> T√≥m t·∫Øt ƒë∆°n h√†ng
            </h3>
            <div className="summary-content">
              {selectedProducts.map((productId) => {
                const product = products.find((p) => p.id === productId);
                if (!product) return null;
                return (
                  <div key={productId} className="summary-item">
                    <span>‚òï {product.name}</span>
                    <strong>{product.price.toLocaleString()}‚Ç´</strong>
                  </div>
                );
              })}

              <div className="summary-row total">
                <span>T·ªïng c·ªông:</span>
                <strong className="total-price">
                  {getTotalPrice().toLocaleString()}‚Ç´
                </strong>
              </div>
            </div>
          </div>
        )}

        {/* ------------------ N√∫t x√°c nh·∫≠n ------------------ */}
        <button
          onClick={handleOrder}
          className={`order-btn ${isLoading ? "loading" : ""}`}
          disabled={isLoading || !selectedTable || selectedProducts.length === 0}
        >
          {isLoading ? (
            <>
              <span className="spinner-small"></span> ƒêang x·ª≠ l√Ω...
            </>
          ) : (
            <>
              <span className="btn-icon">‚úÖ</span> X√°c nh·∫≠n ƒë·∫∑t b√†n / th√™m m√≥n
            </>
          )}
        </button>

        {/* ------------------ Th√¥ng b√°o ------------------ */}
        {message && (
          <div className={`message-box ${messageType}`}>
            <span className="message-icon">
              {messageType === "success" && "‚úÖ"}
              {messageType === "warning" && "‚ö†Ô∏è"}
              {messageType === "error" && "‚ùå"}
            </span>
            {message}
          </div>
        )}
      </div>
    </div>
  );
}
