import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../../api/api";
import { getToken, isAdmin } from "../../utils/authUtils";
import "./AdminOrderPage.css";

export default function AdminOrderPage() {
  const navigate = useNavigate();
  const [orders, setOrders] = useState([]);
  const [date, setDate] = useState(() => new Date().toISOString().split("T")[0]);
  const [message, setMessage] = useState("");

  useEffect(() => {
    if (!isAdmin()) {
      setMessage("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang qu·∫£n l√Ω ƒë∆°n h√†ng. Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n ADMIN.");
      navigate("/login");
      return;
    }
    fetchOrders();
  }, [navigate]);

  const fetchOrders = async () => {
    try {
      const res = await api.get(`/orders?date=${date}`, {
        headers: { Authorization: `Bearer ${getToken()}` },
      });
      if (Array.isArray(res.data)) {
        setOrders(res.data);
      } else {
        setOrders([]);
        setMessage("D·ªØ li·ªáu t·ª´ server kh√¥ng h·ª£p l·ªá.");
      }
    } catch (err) {
      console.error("L·ªói t·∫£i danh s√°ch ƒë∆°n h√†ng:", err);
      if (err.response?.status === 403) {
        setMessage("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p danh s√°ch ƒë∆°n h√†ng.");
      } else {
        setMessage("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng.");
      }
      setOrders([]);
    }
  };

  const handleDateChange = (e) => {
    setDate(e.target.value);
  };

  const handleSearch = () => {
    if (!isAdmin()) {
      setMessage("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang qu·∫£n l√Ω ƒë∆°n h√†ng.");
      return;
    }
    fetchOrders();
  };

  const handleStatusChange = async (orderId, status) => {
    try {
      await api.put(
        `/orders/${orderId}/status`,
        { status },
        { headers: { Authorization: `Bearer ${getToken()}` } }
      );
      fetchOrders();
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      setMessage("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng.");
    }
  };

  if (!isAdmin()) {
    return (
      <div className="error-container">
        <div className="error-icon">üö´</div>
        <p className="error-message">{message}</p>
      </div>
    );
  }

  return (
    <div className="admin-order-page">
      <div className="page-header">
        <h2 className="page-title">
          <span className="title-icon">üìä</span>
          Qu·∫£n l√Ω ƒë∆°n h√†ng
        </h2>
        <div className="date-filter">
          <label className="filter-label">
            <span className="label-icon">üìÖ</span>
            Ch·ªçn ng√†y:
          </label>
          <input
            type="date"
            value={date}
            onChange={handleDateChange}
            className="date-input"
          />
          <button onClick={handleSearch} className="search-btn">
            <span className="btn-icon">üîç</span>
            Xem ƒë∆°n h√†ng
          </button>
        </div>
      </div>

      {message && (
        <div className="message-alert">
          <span className="alert-icon">‚ö†Ô∏è</span>
          {message}
        </div>
      )}

      {orders.length > 0 ? (
        <div className="table-container">
          <table className="orders-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Th·ªùi gian</th>
                <th>Kh√°ch h√†ng</th>
                <th>S·∫£n ph·∫©m</th>
                <th>S·ªë l∆∞·ª£ng</th>
                <th>Gi√°</th>
                <th>T·ªïng gi√°</th>
                <th>Tr·∫°ng th√°i</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {orders.map((order) =>
                (order.items || []).map((item, index) => (
                  <tr key={`${order.id}-${index}`} className="order-row">
                    <td className="order-id">#{order.id}</td>
                    <td className="order-time">
                      {new Date(order.createdAt).toLocaleString("vi-VN")}
                    </td>
                    <td className="customer-id">{order.userId || "N/A"}</td>
                    <td className="product-name">
                      <span className="product-icon">‚òï</span>
                      {item.productName || "Kh√¥ng x√°c ƒë·ªãnh"}
                    </td>
                    <td className="quantity">
                      <span className="quantity-badge">x{item.quantity || 0}</span>
                    </td>
                    <td className="price">{(item.price || 0).toLocaleString()} ‚Ç´</td>
                    <td className="total-price">
                      <strong>{(order.totalPrice || 0).toLocaleString()} ‚Ç´</strong>
                    </td>
                    <td className="status">
                      <span className={`status-badge status-${order.status?.toLowerCase() || 'pending'}`}>
                        {order.status || "N/A"}
                      </span>
                    </td>
                    <td className="actions">
                      {isAdmin() && (
                        <select
                          value={order.status || "PENDING"}
                          onChange={(e) => handleStatusChange(order.id, e.target.value)}
                          className="status-select"
                        >
                          <option value="PENDING">Pending</option>
                          <option value="PAID">Paid</option>
                        </select>
                      )}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      ) : (
        <div className="empty-state">
          <div className="empty-icon">üì≠</div>
          <p className="empty-message">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o trong ng√†y n√†y.</p>
        </div>
      )}
    </div>
  );
}